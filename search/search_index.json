{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"\ud83c\udfaf Mission Statement <p>Application security has become a global risk as organizations are finding it challenging to secure their software infrastructure.</p> <p>The mission of this wiki is to <code>accelerate the transition to secure software development</code> by doing the following:</p> <ul> <li>Making secure development practices free and open for everyone to use and conveying them in such a way that is easy to understand and implement</li> <li>Creating awareness among software developers, so they take ownership of security</li> <li>Developing a community that supports one another to achieve this mission</li> </ul>"},{"location":"About/","title":"About the Author","text":"\ud83d\udc4b Hello \u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u06cc\u06a9\u0645, <p>My name is Amir Hamza.</p> <p>I am the creator of vulnproof, an application security wiki. My goal is to promote secure coding practices among the software developer community and to positively impact the field of application security. With a strong background in software security and a deep passion for software development, I saw a need for a comprehensive resource that provides developers with the tools and information they need to create secure software.</p> <p>If you have any questions or want to reach out, please me at <code>contact@vulnproof.dev</code></p>  \ud83d\ude80 Follow my Socials  <p> </p>"},{"location":"Getting-Started/","title":"Getting Started","text":"\ud83d\udeb4 How to use  <p>The security considerations listed in the checklists for each topic are merely recommendations, not mandatory requirements. When using a checklist for your project, keep in mind that it is not a set of strict rules to follow. The degree of significance for each item on the checklist is indicated by its assigned level of severity. Ultimately, it is up to you to determine what is most suitable for your project. If you need further explanation, don't hesitate to reach out.</p> <p>Disclaimer</p> <p>This wiki is provided as a guide for securing a website; it's not a guarantee of security. Technology and security threats are constantly evolving, so it is important to stay informed and update your website's security measures accordingly.</p>"},{"location":"Wiki/Contents/","title":"Table of Contents","text":""},{"location":"Wiki/Contents/#access-control","title":"Access Control","text":"<ul> <li>Multi Factor Authentication:<ul> <li>Authenticator Management</li> <li>Authenticator Types</li> </ul> </li> <li>User ID and Password Authentication</li> <li>Authorization</li> <li>Session Management</li> </ul>"},{"location":"Wiki/Contents/#api","title":"API","text":"<ul> <li>REST</li> <li>GraphQL</li> <li>SOAP</li> <li>Webhooks</li> <li>WebSockets</li> </ul>"},{"location":"Wiki/Contents/#software","title":"Software","text":"<ul> <li>GitHub</li> </ul>"},{"location":"Wiki/Contents/#vulnerabilities","title":"Vulnerabilities","text":"<ul> <li>Vulnerabilities</li> </ul>"},{"location":"Wiki/API/GraphQL/","title":"GraphQL","text":"<p>coming soon</p>"},{"location":"Wiki/API/REST/","title":"REST","text":"<p>coming soon</p>"},{"location":"Wiki/API/SOAP/","title":"SOAP","text":"<p>coming soon</p>"},{"location":"Wiki/API/WebSockets/","title":"WebSockets","text":"<p>coming soon</p>"},{"location":"Wiki/API/Webhooks/","title":"Webhooks","text":"<p>coming soon coming soon</p>"},{"location":"Wiki/Access-Control/Authorization/","title":"Authorization","text":"<p>This checklist is a guide for securing authorization on a website. It outlines a series of steps and best practices that should be taken to ensure that only authorized users can access sensitive information and perform certain actions on a website.</p>"},{"location":"Wiki/Access-Control/Authorization/#authorization-id","title":"\ud83e\udeaa Authorization ID","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Ensure role ID is not revealed in URL, cookies, session, local storage, and response header  Reason: An attacker can steal the ID and gain unauthorized access High  <code>Credential Theft</code> ACS, ASVS 2 Verify: If role ID is accessible to the user, ensure that it is validated before it is processed  Reason: Prevents malicious input by an attacker High  <code>Injection</code> ACS, ASVS 3 Verify: Rate limiting mechanisms exist on the role ID Reason: Protection against guessing and Denial of Service (DoS) attacks Medium  <code>Denial of Service</code>, <code>Brute Force</code> \u26d4 4 Verify: If role ID is accessible to the user, it is created using secure random function  Reason: The role ID is not guessable Medium  <code>Brute Force</code> ACS, ASVS 5 Verify: Authorization ID exchange takes place over TLS (HTTPS)  Reason: Encrypted channel that prevent eavesdropping High  <code>Eavesdropping</code> \u26d4 6 Verify: Data related to Authorization is stored server side by using secure encryption and hashing algorithms  Reason: Provides additional security incase of a database compromise High  <code>Credential Theft</code> \u26d4"},{"location":"Wiki/Access-Control/Authorization/#authorization-policies","title":"\ud83d\udccb Authorization Policies","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: If a library is used for authorization, ensure it is not misconfigured  Reason: Default configurations or misconfigurations can grant unauthorized access to an attacker High  <code>Misconfiguration</code> ACS 2 Verify: Libraries used for authorization are not vulnerable  Reason: An attacker can use the vulnerable library to escalate their privileges High  <code>Vulnerable Dependency</code> ACS 3 Verify: Sensitive routes cannot be accessed without proper authorization  Reason: Prevent directory traversal High  <code>Path Traversal</code> ACS, ASVS 4 Verify: If location-based authorization is enabled, ensure that VPN, proxy, or changing browser geolocation cannot circumvent it  Reason: Prevent location spoofing Medium  <code>Location Spoofing</code> ACS 5 Verify: Unauthorized access isn't granted through Insecure Direct Object Reference (IDOR) Reason: Prevent unauthorized access by IDOR Medium  <code>Insecure Direct Object Reference</code> ACS, ASVS 6 Verify: Authorization checks are enforced for each page on the frontend  Reason: Cannot steal statically typed information of frontend pages Low  <code>Path Traversal</code> ACS 7 Verify: Ensure that authorization is validated on client and server side  Reason: Prevent injection and Man-in-The-Middle (MiTM) attacks Medium  <code>Man in the Middle</code>, <code>Injection</code> ACS 8 Verify: Least privilege is enforced  Reason: Minimize attack surface incase someone has unauthorized access to someone's account High  <code>Privilege Escalation</code> ACS, ASVS 9 Verify: Deny by default when no authorization roles match  Reason: Attempts by unauthorized users to gain access are assumed to be harmful and are denied access High  <code>Privilege Escalation</code> ACS 10 Verify: Validate permissions on each request  Reason: Ensure all requests are coming from the right authority Medium  <code>Impersonation</code> ACS 11 Verify: Ensure appropriate logging for failed authorization attempts  Reason: Used for investigation in case of a breach or an attempt of a breach High  <code>Insufficient Logging</code> ACS 12 Verify: Proper error handling of insufficient privileges takes place  Reason: Terminate the request for unauthorized paths High  <code>Privilege Escalation</code> ACS"},{"location":"Wiki/Access-Control/Authorization/#authorization-in-production","title":"\ud83d\udd34 Authorization in Production","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Authorization roles are regularly reviewed and updated  Reason: Ensure each person only has the access they need High  <code>Privilege Escalation</code> \u26d4 2 Verify: Audit logs are monitored regularly for anomalies  Reason: Identify attacks that someone tried on a user High  <code>Path Traversal</code> \u26d4 3 Verify: Third party software or libraries used for authorization are updated to the most recent version and are regularly patched  Reason: Vulnerability in a third party resource can grant an attacker unauthorized access High  <code>Privilege Escalation</code>, <code>Path Traversal</code> \u26d4 4 Verify: Conduct regular security assessments, vulnerability scans, and penetration testing to identify vulnerabilities in custom and third-party code  Reason: Identify any security vulnerabilities that might have appeared in authorization implementation High  <code>Most Vulnerabilities</code> \u26d4 <p>\ud83d\udd17 Sources:</p> <p>Open Web Application Security Project (OWASP):</p> <ul> <li>(ASVS) Application Security Verification Standard - Access Control</li> <li>(ACS) Authorization Cheat Sheet</li> </ul>"},{"location":"Wiki/Access-Control/Session/","title":"Session Management","text":"<p>This checklist is designed to ensure that user sessions on a website are secure. It includes a series of steps and best practices for protecting user data and preventing unauthorized access.</p>"},{"location":"Wiki/Access-Control/Session/#session-creation","title":"\ud83d\udd28 Session Creation","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \ud83d\udc80Vulnerabilities \ud83d\udd17Sources 1 Verify: Change the default session ID name set by the framework to a generic name as 'id'  Reason: Session ID name can disclose information about the application's framework and language being used Low  <code>Information Leakage</code> SMCS 2 Verify: The session ID must be at least 128 bits or 16 characters long  Reason: Provides enough entropy to make guessing challenging Medium  <code>Brute Force</code> SMCS 3 Verify: The session ID name is meaningless, meaning it doesn't reveal any information about the app or the user  Reason: Prevent sensitive information from leaking Low  <code>Information Leakage</code> SMCS, SP800-63B 4 Verify: The session ID has an entropy of at least 64 bits  Reason: Minimum randomness that makes guessing challenging Medium  <code>Brute Force</code> SMCS, ASVS, SP800-63B 5 Verify: The session ID is generated by using cryptographically secure random function  Reason: Ensure that the ID value is random and cannot be predicted High  <code>Brute Force</code> SMCS, ASVS, SP800-63B 6 Verify: The session ID is unique for each user  Reason: Prevent users from accessing someone else's account High  <code>Impersonation</code> NIST 7 Verify: The session mechanism provided by a modern framework is being used  Reason: Custom session mechanisms aren't thoroughly tested and may contain vulnerabilities High  <code>Roll Your Own Code</code> SMCS 8 Verify: If an older version of a framework is being used, ensure that session mechanism isn't vulnerable  Reason: An attacker can compromise your session by using the publicly available vulnerability High  <code>Vulnerable Dependency</code> SMCS"},{"location":"Wiki/Access-Control/Session/#session-storage","title":"\ud83d\udce6 Session Storage","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \ud83d\udc80Vulnerabilities \ud83d\udd17Sources 1 Verify: <code>Secure</code> attribute is enabled for cookies  Reason: Instructs the browser to send cookies through HTTPS High  <code>Eavesdropping</code> <code>xxxxxxxxxx</code> SMCS, ASVS, SP800-63B 2 Verify: <code>HttpOnly</code> attribute is enabled for cookies  Reason: Instructs web browsers not to allow scripts to prevent XSS High  <code>Injection</code>, <code>Credential Theft</code> SMCS, ASVS, SP800-63B 3 Verify: <code>SameSite</code> attribute is enabled for cookies  Reason: Instructs web browsers to only send the cookie to the specified domain and all subdomains Medium  <code>Cross-Site Request Forgery</code> SMCS, ASVS 4 Verify: If <code>Domain</code> cookie attribute exists, ensure that the domain value is not too permissive  Reason: Ensures that cookies are only shared with the domain provided. Vulnerabilities in example.com might allow an attacker to get access to the session IDs from secure.example.com Medium  <code>Session Hijacking</code> SMCS, ASVS 5 Verify: If <code>Path</code> cookie attribute exists, ensure it is as restrictive as possible to the application that makes use of the session ID  Reason: If the path is generic such as <code>/</code>, then there's a chance that important cookie, such as session ID, will be accessible throughout the site Medium  <code>Credential Theft</code> SMCS, ASVS 6 Verify: If <code>Expires</code> and <code>Max-Age</code> attributes are used, a short expiration time is set to prevent long persistent cookies  Reason: Persistent cookies will outlive the close browser event. It is highly recommended to use non-persistent cookies for session management purposes so that the session ID does not remain on the web client cache for long periods, from where an attacker can obtain it Medium  <code>Credential Theft</code> SMCS, ASVS 7 Verify: The session ID is not stored in local storage  Reason: Local storage is insecure as it doesn't have protection against XSS attacks, and it's value is persistent unless changed manually in code High  <code>Injection</code>, <code>Credential Theft</code> SMCS 8 Verify: The session ID is not stored in session storage  Reason: Session storage data is persistent unless the tab or window is closed, and it is vulnerable to XSS High  <code>Injection</code>, <code>Credential Theft</code> SMCS 9 Verify: Ensure that session ID is not cached in browser  Reason: If logged in device is stolen or left unattended, someone else can have access to that account Low  <code>Credential Theft</code> SMCS 10 Verify: Session data is stored server side by using secure encryption and hashing algorithms  Reason: Provides additional security incase of a database compromise High  <code>Credential Theft</code> SMCS"},{"location":"Wiki/Access-Control/Session/#session-expiration","title":"\ud83d\uddd1\ufe0f Session Expiration","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \ud83d\udc80Vulnerabilities \ud83d\udd17Sources 1 Verify: Session expires after a period of inactivity  Reason: Limits the time an attacker has to guess a session ID High  <code>Session Hijacking</code> SMCS, ASVS, SP800-63B 2 Verify: Expired session ID is no longer active  Reason: This ensures that incase an older session ID is stolen, it won't be of use High  <code>Session Hijacking</code> SMCS, ASVS, SP800-63B 3 Verify: When the user clicks the logout button, the session is invalidated, and the user is asked to login  Reason: This ensures that an account is not accessible after a logout attempt High  <code>Impersonation</code> SMCS, ASVS, SP800-63B 4 Verify: Allow the user to invalidate sessions on different devices  Reason: A stolen or old device doesn't give access to someone else Medium  <code>Impersonation</code> SMCS, ASVS 5 Verify: An application should have an absolute timeout after which a user is required to login regardless of their activity/inactivity  Reason: Additional security measure to ensure that session IDs are being refreshed Low  <code>Session Hijacking</code> SMCS 6 Verify: Timeout functionality isn't client based  Reason: An attacker is not able to manipulate the current time and continue their session for longer than intended Low  <code>Session Hijacking</code> SMCS 7 Verify: Session ID renewable process exists regardless of idle timeouts  Reason: This limits the amount of time a hacker can have access to a hijacked session Low  <code>Session Hijacking</code> SMCS"},{"location":"Wiki/Access-Control/Session/#session-policies","title":"\ud83d\udccb Session Policies","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \ud83d\udc80Vulnerabilities \ud83d\udd17Sources 1 Verify: Session related events are logged such as creation, renewable, and destruction  Reason: Helps in detecting and investigating security incidences High  <code>Insufficient Logging</code> SMCS, ASVS 2 Verify: The session ID is never trusted and is always validated for malicious input before processing it  Reason: Protection against injection and denial of service attacks High  <code>Denial of Service</code>, <code>Injection</code> SMCS 3 Verify: Session ID exchange takes place over TLS (HTTPS)  Reason: Encrypted channel that prevent eavesdropping High  <code>Eavesdropping</code> SMCS, ASVS, SP800-63B 4 Verify: Rate-limiting mechanisms exist on the session ID Reason: Prevention against guessing and Denial of Service (DoS) Medium  <code>Denial of Service</code>, <code>Brute Force</code> \u26d4 5 Verify: If a library is used for session management, ensure it is not misconfigured  Reason: Default configurations or misconfigurations can grant unauthorized access to an attacker High  <code>Misconfiguration</code> \u26d4 6 Verify: Libraries used for session management are not vulnerable  Reason: An attacker can use the vulnerable library to escalate their privileges High  <code>Vulnerable Dependency</code> \u26d4 7 Verify: The application never reveals session ID in URL parameters or error messages  Reason: An attacker can steal this information and hijack someone's session Medium  <code>Information Leakage</code> ASVS 8 Verify: A new session is generated when privileges change or sensitive features are performed, such as resetting passwords  Reason: Added security in case current session was hijacked Medium  <code>Impersonation</code> SMCS, ASVS 9 Verify: The user is notified when a new session is generated from a new device or location  Reason: In case an unwanted login occurs from another device or a location, the user knows Medium  <code>Impersonation</code> \u26d4"},{"location":"Wiki/Access-Control/Session/#session-in-production","title":"\ud83d\udd34 Session in Production","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \ud83d\udc80Vulnerabilities \ud83d\udd17Sources 1 Verify: There's a process for invalidating sessions in the event of a security breach  Reason: Prevent an attacker from having prolonged access High  <code>Session Hijacking</code> \u26d4 2 Verify: Audit logs are monitored regularly for anomalies  Reason: Identify attacks that were attempted on a user's account High  <code>Session Hijacking</code> \u26d4 3 Verify: Third party software or libraries used for session management are updated to the most recent version and are regularly patched  Reason: Vulnerability in a third party resource can grant an attacker unauthorized access High  <code>Session Hijacking</code>, <code>Vulnerable Dependency</code> \u26d4 4 Verify: Conduct regular security assessments, vulnerability scans, and penetration testing to identify vulnerabilities in custom and third-party code  Reason: Identify any security vulnerabilities that might have appeared in session implementation High  <code>Session Hijacking</code> \u26d4 <p>\ud83d\udd17 Sources:</p> <p>Open Web Application Security Project (OWASP):</p> <ul> <li>[ASVS] Application Security Verification Standard - Session Management</li> <li>[SMCS] Session Management Cheat Sheet</li> </ul> <p>National Institute of Standards and Technology (NIST):</p> <ul> <li>[SP800-63B] 7 Session Management</li> </ul>"},{"location":"Wiki/Access-Control/UserID-Password/","title":"User ID and Password Authentication","text":"<p>This checklist is designed to ensure the security of user authentication. It includes a series of steps and best practices for protecting user IDs and passwords and preventing unauthorized access to user accounts.</p>"},{"location":"Wiki/Access-Control/UserID-Password/#user-registration","title":"\ud83d\udd28 User Registration","text":"<p>Note</p> <p>The following two checklists should be considered for the identifiers that can be used as a User ID.</p> <p>Username</p> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Usernames are case insensitive  Reason: Prevent confusion between 'smith' and 'Smith' Low  <code>Impersonation</code> <code>xxxxxxxxxx</code> ACS 2 Verify: Usernames are unique  Reason: Prevent a username to be used for multiple accounts High  <code>Impersonation</code> ACS 3 Verify: Usernames must be at least 6 characters long  Reason: Protection against guessing attacks High  <code>Brute Force</code> ACS 4 Verify: Usernames are not the same as some system-reserved names such as root, admin, administrator, etc.  Reason: Prevent user from receiving high privileges High  <code>Privilege Escalation</code> ACS 5 Verify: Disallow common and easily guessable usernames such as test, user, admin, etc.  Reason: Make it harder for an attacker to predict someone's username Low  <code>Brute Force</code> \u26d4 6 Verify: Username are no longer than 254 characters in length  Reason: Protection against denial of service attack Low  <code>Denial of Service</code> IVCS <p>Email</p> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Emails are no longer than 254 characters in length  Reason: Protection against denial of service attack Low  <code>Denial of Service</code> <code>xxxxxxxxxxxxxxx</code> IVCS 2 Verify: Email receives a PIN or a URL token for verification. The PIN and URL token Checklists under Forgot Credentials must be used for this  Reason: Verify that a person has access to the email they provided High  <code>Impersonation</code> IVCS 3 Verify: Emails are unique  Reason: Prevent an email to be used for multiple account High  <code>Impersonation</code> IVCS <p>Password</p> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: A password is at least 8 characters in length  Reason: Protect against guessing since shorter passwords can be guessed High  <code>Brute Force</code> <code>xxxxxxxxxxx</code> ACS, NISP800-63B 2 Verify: A password's maximum length is at least 64 characters Reason: Protect against password length Denial of Service attacks Low  <code>Denial of Service</code> ACS, ASVS, SP800-63B 3 Verify: All ASCII characters, Unicode, and white spaces are considered valid input  Reason: Allow users to create a complex password which will make it hard to guess Medium  <code>Brute Force</code> SP800-63B 4 Verify: Password contains characters from the following categories: Upper and lower case alphabets, numbers, special characters and unicodes  Reason: Increases passwords entropy which makes it harder to predict High  <code>Brute Force</code> MS365 5 Verify: Common or previously breached passwords are blocked Reason: Protect against password guessing Medium  <code>Brute Force</code> ACS, ASVS, SP800-63B 6 Verify: The user is not asked to set password hints Reason: Reveals information about the password, which makes it easier to guess High  <code>Brute Force</code> ASVS, SP800-63B 7 Verify: The user is notified of an account creation via email  Reason: The user is aware of the use of their email on an external website Medium  <code>Impersonation</code> ASVS, SP800-63B"},{"location":"Wiki/Access-Control/UserID-Password/#credential-storage","title":"\ud83d\udce6 Credential Storage","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Passwords are hashed before storing in the database  Reason: In case of a password leak, the hashed passwords won't allow access to an account High  <code>SQL Injection</code> PSCS, ASVS, SP800-63B 2 Verify: User IDs are stored securely in the database by either hashing or encrypting them  Reason: In case of a data breach, user IDs are unreadable Low  <code>SQL Injection</code> \u26d4 3 Verify: Only approved encrypting and hashing algorithms are used  Reason: Unapproved hashing algorithms are insecure since they can be bypassed and clear text values can be extracted High  <code>Weak Hash</code>, <code>Weak Encryption</code> PSCS, ASVS, SP800-63B 4 Verify: Salt is used before hashing passwords  Reason: Makes passwords even more complex by adding additional characters to it. Also helps make same passwords used by multiple users different High  <code>Brute Force</code> PSCS, ASVS, SP800-63B 5 Verify: Salt is at least 32 bits in size  Reason: Makes it challenging to be guessed High  <code>Brute Force</code> PSCS, ASVS, SP800-63B 6 Verify: Salt is unique for each password  Reason: When two users choose the same password, their hash won't be the same as each password is appended to a unique salt High  <code>Brute Force</code> PSCS, ASVS, SP800-63B 7 Verify: Salt is generated by using secure random algorithms  Reason: Makes it hard to predict the value of the hash High  <code>Brute Force</code> PSCS, ASVS, SP800-63B 8 Verify: Peppering can be used in addition to salting  Reason: Adds additional security to the passwords. Preferred for sensitive accounts Low  <code>Brute Force</code> OPSCS 9 Verify: If peppering is used, it is stored in a password vault  Reason: More secure than storing in the database High  <code>Brute Force</code> OPSCS 10 Verify: Pepper rotation policy is in place  Reason: In case of a leak, rotation policy will invalidate the older pepper High  <code>Brute Force</code>, <code>Credential Theft</code> OPSCS 11 Verify: Pepper is produced by using secure random algorithms  Reason: Makes it challenging to guess the value High  <code>Brute Force</code> OPSCS"},{"location":"Wiki/Access-Control/UserID-Password/#user-verification","title":"\ud83d\udea6 User Verification","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: If account lockout is in place for the provided user ID, authentication process should not even start  Reason: Response time delays during authentication can reveal if an account exists in the database or not. This is also a waste of resources Medium  <code>Brute Force</code> \u26d4 2 Verify: An account is locked after a certain number of failed attempts  Reason: Rate limiting mechanism to prevent guessing High  <code>Brute Force</code> ACS, ASVS 3 Verify: Account lockout is not for a fixed time rather, it should increase exponentially with each failed login attempt  Reason: Rate limiting mechanism that makes it challenging for guessing attacks to occur Medium  <code>Brute Force</code> ACS, SP800-63B 4 Verify: The user is notified via email when an account lockout takes place  Reason: The user must be aware if someone tried to guess their account so they can change their password High  <code>Brute Force</code> \u26d4 5 Verify: Error responses for failed login attempts are generic such as: user ID or password is incorrect Reason: Too specific error messages can reveal information about the user's account Medium  <code>Brute Force</code> ACS 6 Verify: HTTP status codes during authentication are generic  Reason: Too specific error messages can reveal information about the user's account Informational  <code>Brute Force</code> ACS 7 Verify: Response time for user ID and password checks during authentication should be the same  Reason: The difference in response time can indicate if credentials was found in the database or not Medium  <code>Brute Force</code> ACS 8 Verify: All authentication cookies must follow implementation guidelines in Session Management Reason: Implement authentication cookies securely High  <code>Cookie Poisoning</code> ACS, SP800-63B 19 Verify: The user is sent an email notification if login occurs from a different device, IP, or geo-location  Reason: In case someone else logged into the user's account without their consent Low  <code>Impersonation</code> ACS"},{"location":"Wiki/Access-Control/UserID-Password/#credential-reset","title":"\ud83d\udd03 Credential Reset","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: The user is required to reauthenticate before a password or user ID reset  Reason: Ensures that the actual user is making a change, not someone else High  <code>Impersonation</code> <code>xxxxxxxx</code> ACS, SP800-63B 2 Verify: The user is required to type the new password twice  Reason: Helps prevent typos Low  \u26d4 SP800-63B 3 Verify: Reuse of old passwords is not allowed  Reason: Users are likely to use the same password across many websites, which can be a risk if one of those websites is compromised Low  <code>Brute Force</code> \u26d4 4 Verify: When a new credential is set, it must follow Registration and Credential Storage guidelines for secure handling and storage Reason: Ensure that new credentials are secure High  <code>Credential Theft</code> \u26d4 5 Verify: Email notification is sent to this user when a credential change is successful  Reason: Incase the user did not authorize a password change, they should know someone else did Medium  <code>Impersonation</code> ACS, SP800-63B"},{"location":"Wiki/Access-Control/UserID-Password/#forgot-credentials","title":"\ud83e\udd14 Forgot Credentials","text":"<p>When a user chooses forgot credentials, their identity can be verified through multiple ways:</p> <ul> <li>Generate a PIN that can be sent to the user with the provided email. This PIN needs to be confirmed before a password reset is allowed</li> <li>Create a token and pass it into the query string, create a limited session around that unique URL, and send it to the user's email</li> <li>Recovery/Backup codes can also be used to give access when the user forgets their password</li> </ul> <p></p> <p>The following items must be considered for using PINS, URL tokens or Backup Codes.</p> <p>PIN</p> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: The PIN must be 6 to 12 digits long  Reason: Increase complexity which helps against guessing High  <code>Brute Force</code> FPCS 2 Verify: The PIN is unique and is generated using secure random algorithms  Reason: Provides additional protection against guessing since a truly random value is hard to predict High  <code>Brute Force</code> FPCS 3 Verify: The PIN is sent to either email or phone number that the user provided  Reason: The possession of the PIN verifies their identity High  <code>Credential Theft</code> FPCS 4 Verify: A limited time session is permitted for the PIN until it expires  Reason: In case the PIN leaks through an email/phone compromise, it is no longer active after a few minutes High  <code>Credential Theft</code> FPCS 5 Verify: Use Credential Storage policies for hashing the PIN when it's being stored  Reason: Helps against database compromise or PIN leakage High  <code>Credential Theft</code> FPCS 6 Verify: A generic message is shown if the email provided exists or not such as: \"A PIN will be sent to the provided email if it exists in the database\"  Reason: Too specific error messages can reveal information about the user's account Medium  <code>Brute Force</code> FPCS 7 Verify: The PIN is checked for validity before the user can set the set a new password  Reason: The likelihood of a logic error is high when PIN validity check and password reset happen together High  <code>Logic Error</code>, <code>Impersonation</code> FPCS 8 Verify: The PIN in invalidated once it has been used  Reason: Prevent the reuse of the PIN in case an attacker gets a hold of it High  <code>Credential Theft</code> FPCS <p>URL Token</p> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: The token is generated using secure random algorithms  Reason: Protection against guessing since a random value is hard to predict High  <code>Brute Force</code> <code>xxxxxxxxxxx</code> FPCS 2 Verify: Use Credential Storage checklist for hashing the token for secure storage  Reason: Helps against database compromise or token leakage High  <code>Credential Theft</code> FPCS 3 Verify: URL is hard-coded rather than relying on the host header  Reason: Protection against host header injection Medium  <code>Host Header Injection</code> FPCS 4 Verify: The reset password page uses the Referrer Policy tag with the <code>noreferrer</code> value  Reason: Prevention against referrer leakage Medium  <code>Referrer Leakage</code> FPCS 5 Verify: A limited session is allowed for the URL token before it expires  Reason: In case the token leaks through an email/phone compromise, is no longer active after a few minutes High  <code>Credential Theft</code> FPCS 6 Verify: The token is checked for validity before the user can set the set a new password  Reason: Ensures that the request is coming from the intended user High  <code>Impersonation</code> FPCS 7 Verify: The token is invalidated once it has been used  Reason: Prevent the reuse of the token High  <code>Credential Theft</code> FPCS <p>Additional Authenticator Factor</p> <p>Recovery/Backup code security checklist can be viewed here</p> <p>Continue ...</p> <p>Once the user has been confirmed, then Credential Reset checklist must be used</p>"},{"location":"Wiki/Access-Control/UserID-Password/#authentication-policies","title":"\ud83d\udccb Authentication Policies","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: All authentication-related events must be logged, such as account lockout, account creation, account login, etc.  Reason: Helps in detecting and investigating security incidences High  <code>Insufficient Logging</code> ACS 2 Verify: Passwords and private user IDs aren't logged  Reason: Sensitive user data exists in plaintext High  <code>Information Leakage</code> LCS 3 Verify: All user-supplied input i.e. passwords, user IDs, PINs etc., should never be trusted and must be validated  Reason: Protect against injection or denial of service attacks High  <code>SQL Injection</code> ACS 4 Verify: TLS (HTTPS) and <code>Strict-Transport-Security</code> header is enable for every authentication process  Reason: Network traffic is encrypted which helps prevent eavesdropping High  <code>Eavesdropping</code> ACS, SP800-63B 5 Verify: Rate limiting mechanisms exist  Reason: Prevention against guessing and denial of service High  <code>Denial of Service</code>, <code>Brute Force</code> SP800-63B 6 Verify: Password expiration is in place  Reason: Incase password leaks it is not active forever Medium  <code>Impersonation</code>, <code>Credential Theft</code> ACS, SP800-63B 7 Verify: The application requires the user to reauthenticate for sensitive features such as payment, updating password or user ID etc. Reason: Ensures that request is coming from the intended user High  <code>Impersonation</code> ACS, SP800-63B 8 Verify: User has the option to set a second or multi-factor authentication  Reason: Password leak won't have any impact because the second factor is still not compromised High  <code>Impersonation</code>, <code>Credential Theft</code> PSCS, ASVS, SP800-63B 9 Verify: Re-authentication takes place after a period of inactivity  Reason: This helps to prevent unauthorized access to user accounts and sensitive information, even if a user's device or session has been compromised High  <code>Impersonation</code> ACS, SP800-63B"},{"location":"Wiki/Access-Control/UserID-Password/#authentication-in-production","title":"\ud83d\udd34 Authentication in Production","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Regularly monitor log activity  Reason: To detect any suspicious activity such as multiple failed login attempts High  <code>Most Vulnerabilities</code> \u26d4 2 Verify: Periodically review registered user IDs for suspicious entries  Reason: Ensure that registered usernames are not impersonating someone else, using profanity, or containing malicious characters Medium  <code>Website Defacement</code>, <code>Impersonation</code> \u26d4 3 Verify: Third party software or libraries used for password authentication are updated to the most recent version and are regularly patched  Reason: Vulnerability in a third party resource can grant an attacker unauthorized access High  <code>Vulnerable Dependency</code> \u26d4 4 Verify: Conduct regular security assessments, vulnerability scans, and penetration testing to identify vulnerabilities in custom and third-party code  Reason: Identify any security vulnerabilities that might have appeared in password authentication implementation High  <code>Most Vulnerabilities</code> \u26d4 <p>\ud83d\udd17 Sources:</p> <p>Microsoft (MS):</p> <ul> <li>[MS365] Microsoft 365 Password Recommendations </li> </ul> <p>Open Web Application Security Project (OWASP):</p> <ul> <li>[ASVS] Application Security Verification Standard - Authentication</li> <li>[ACS] Authentication Cheat Sheet</li> <li>[PSCS] Password Storage Cheat Sheet</li> <li>[FPCS] Forgot Password Cheat Sheet</li> <li>[IVCS] Input Validation Cheat Sheet</li> <li>[LCS] Logging Cheat Sheet</li> </ul> <p>National Institute of Standards and Technology (NIST):</p> <ul> <li>[SP800-63B] 5.1.1.2 Memorized Secret Verifiers</li> </ul>"},{"location":"Wiki/Access-Control/MFA/Authenticator-Management/","title":"Authenticator Management","text":"<p>Several events can occur over the lifecycle of a user\u2019s authenticator that affects that authenticator\u2019s use. These events include authenticator registration, verification, reset, and loss. This section describes the actions to be taken in response to those events.</p>"},{"location":"Wiki/Access-Control/MFA/Authenticator-Management/#authenticator-registration","title":"\ud83d\udd28 Authenticator Registration","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: The website supports at least two factors  Reason: Two or more factors are more secure than only one factor High  <code>Credential Theft</code>, <code>Brute Force</code> SP800-63B 3 Verify: If a user tries to register an authenticator, they should be re-authenticated by using the existing factor  Reason: Confirms that the actual user is registering an authenticator, not someone else High  <code>Impersonation</code> SP800-63B 4 Verify: Guidelines for the Type of authenticator being registered are considered  Reason: Ensure that unique security policies for each authenticator are considered High  \u26d4 SP800-63B 5 Verify: Authenticator expiration should be in place  Reason: Prevent an attacker from having access forever Low  <code>Credential Theft</code>, <code>Impersonation</code> SP800-63B"},{"location":"Wiki/Access-Control/MFA/Authenticator-Management/#authenticator-verification","title":"\ud83d\udea6 Authenticator Verification","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Stop the execution and return an expired message if the authenticator is expired  Reason: Limit the use of resources Medium  <code>Credential Theft</code> SP800-63B 2 Verify: Authenticator verification should happen after Memorized Secret Reason: Revealing information to an attacker about which the second factor is being used Low  <code>Information Leakage</code> SP800-63B 3 Verify: Authenticator verification should take place in a limited time  Reason: Less time an attacker has to respond High  <code>Impersonation</code>, <code>Credential Theft</code> SP800-63B 4 Verify: An account is locked after a certain number of failed verification attempts  Reason: Prevents an attacker from guessing the verification token/secret High  <code>Brute Force</code> SP800-63B"},{"location":"Wiki/Access-Control/MFA/Authenticator-Management/#authenticator-reset","title":"\ud83d\udd03 Authenticator Reset","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: The user should be reauthenticated before an authenticator reset takes place  Reason: Ensures that the actual user is making a change, not someone else High  <code>Impersonation</code> SP800-63B 2 Verify: The user is required to verify the authenticator's output before it is accepted  Reason: Confirms the possession of the authenticator High  <code>Impersonation</code> , <code>Credential Theft</code> SP800-63B 3 Verify: Guidelines for the Type of authenticator being registered must be considered  Reason: A new authenticator is installed securely High  \u26d4 SP800-63B 4 Verify: Once a new authenticator is established, the website should revoke the previous authenticator  Reason: In case an attacker gets a hold of the old authenticator, it wouldn't work High  <code>Impersonation</code> , <code>Credential Theft</code> SP800-63B"},{"location":"Wiki/Access-Control/MFA/Authenticator-Management/#authenticator-lost","title":"\ud83d\ude15 Authenticator Lost","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: When a user reports an authenticator lost, they should be reauthenticated  Reason: Confirms that the actual user is making the lost claim not someone else High  <code>Impersonation</code> SP800-63B 2 Verify: If a user reports a lost authenticator during the verification stage at login, a PIN or token URL strategy from Credential Reset must be followed Reason: Establishes a secure way for a user to change their authenticator High  <code>Impersonation</code> , <code>Credential Theft</code> SP800-63B 3 Verify: The lost authenticator no longer works with the user's account  Reason: Incase an attacker gets a hold of the authenticator, it shouldn't work High  <code>Impersonation</code> , <code>Credential Theft</code> SP800-63B"},{"location":"Wiki/Access-Control/MFA/Authenticator-Management/#authenticator-policies","title":"\ud83d\udccb Authenticator Policies","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: All authenticator-related events are logged. Such as registering a new authenticator, lost authenticator, incorrect authenticator value, etc.  Reason: Helps in detecting and investigating security incidences High  <code>Insufficient Logging</code> ACS, ASVS, SP800-63B 2 Verify: All user-supplied input i.e., PINs, secrets, code, etc., should never be trusted and must be validated  Reason: Prevents injection or denial of service attacks High  <code>Denial of Service</code>, <code>Injection</code> ACS 3 Verify: TLS (HTTPS) and <code>Strict-Transport-Security</code> header are enabled for every authentication process  Reason: Network traffic is encrypted which prevents eavesdropping High  <code>Eavesdropping</code> ACS, ASVS 4 Verify: Rate-limiting mechanisms exist  Reason: Prevents guessing and denial of service High  <code>Denial of Service</code>, <code>Brute Force</code> ACS, ASVS, SP800-63B 5 Verify: At least two factors can be used. \"something you know\" must be following by either a \"something you have\" or \"something you are\"  Reason: Decreases the likelihood of account compromise since possession of two factors is needed High  <code>Credential Theft</code> ACS, ASVS, SP800-63B 6 Verify: The website should maintain a record of all authenticators that are associated with an account  Reason: Revocation and deletion of authenticators are possible in case of compromise High  <code>Credential Theft</code> SP800-63B 7 Verify: Email notifications must be sent for sensitive operations such as authenticator registration, reset, lost, and account lockout  Reason: In case the user didn't authorize these operations, the notification will alert them High  <code>Impersonation</code> ACS, ASVS, SP800-63B"},{"location":"Wiki/Access-Control/MFA/Authenticator-Management/#authenticator-in-production","title":"\ud83d\udd34 Authenticator in Production","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Regularly monitor log activity  Reason: To detect any suspicious activity such as multiple failed authenticator attempts High  <code>Impersonation</code> \u26d4 2 Verify: Periodically review registered authenticators for suspicious entries  Reason: Ensure that unauthorized authenticators aren't associate with an account High  <code>Impersonation</code>, <code>Credential Theft</code> \u26d4 3 Verify: Third party software or libraries used by multi-factor authentication are updated to the most recent version and are regularly patched  Reason: Vulnerability in a third party resource can grant an attacker unauthorized access High  <code>Vulnerable Dependency</code> \u26d4 4 Verify: Conduct regular security assessments, vulnerability scans, and penetration testing to identify vulnerabilities in custom and third-party code  Reason: Identify any security vulnerabilities that might have appeared in multi-factor authentication implementation High  <code>Impersonation</code>, <code>Credential Theft</code> \u26d4 <p>\ud83d\udd17 Sources:</p> <p>Open Web Application Security Project (OWASP):</p> <ul> <li>[ASVS] Application Security Verification Standard - Authentication</li> <li>[ACS] Authentication Cheat Sheet</li> </ul> <p>National Institute of Standards and Technology (NIST):</p> <ul> <li>[SP800-63B] 5 Authenticator and Verifier Requirements</li> </ul>"},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/","title":"Authenticator Types","text":"<p>This section covers the different types of authentication factors that are available and their security considerations. Each type is divided into the following categories:</p> Factor Definition Types Example Something you know A value that a user remembers Memorized Secret Something you have The possession of a unique value lookup Secrets, Out-of-Band Devices, Single and Multi Factor OTP Devices and Single and Multi-factor Cryptographic Software or Device Something you are A physical attribute of a user that is unique to them Biometric"},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/#something-you-know","title":"Something you know","text":""},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/#memorized-secrets","title":"\ud83e\udde0 Memorized Secrets","text":"<p>\ud83d\udd36 Definition: A secret value intended to be chosen and memorized by the user</p> <p>\ud83d\udd36 Example:</p> <ul> <li>Passwords</li> <li>Security Questions</li> </ul> <p>Password</p> <p>Note</p> <p>Password security checklist can be found here</p> <p>Security Questions</p> <p>Danger</p> <p>Security questions should NOT be used as it is considered RESTRICTED in NIST SP 800-63B 5.1.1.2</p> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Security questions are not used as an authentication factor  Reason: Weak form of authentication as the value can be easily guessed High  <code>Brute Force</code> SQCS 2 Verify: Simple answers such as '123' are restricted  Reason: Easily guessable value High  <code>Brute Force</code> SQCS 3 Verify: The user is required to reauthenticate when updating security questions  Reason: Ensure that the request is coming from the intended user High  <code>Impersonation</code> SQCS 4 Verify: More than one question is asked to increase complexity  Reason: Makes guessing harder High  <code>Brute Force</code> SQCS 5 Verify: Questions that are being asked are specific to each user instead of generic questions  Reason: Generic questions have generic answers and are easily guessable High  <code>Brute Force</code> SQCS 6 Verify: Security questions are presented after when the username and password are accepted  Reason: Security questions should only be used as a sector factor because it's not as strong as passwords High  <code>Brute Force</code> SQCS 7 Verify: Security questions are hashed when stored in the database and must follow the Credential Storage guidelines Reason: In case answers leak, the hash value won't allow access to an account High  <code>Impersonation</code>, <code>Credential Theft</code> SQCS"},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/#something-you-have","title":"Something you have","text":""},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/#lookup-secrets","title":"\ud83d\udcd6 Lookup Secrets","text":"<p>\ud83d\udd36 Definition: lookup secrets are a set of secrets shared between the user and a website</p> <p>\ud83d\udd36 Example: Acts as a recovery/backup codes when the user forgets their password or locks their account</p> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: lookup secret has at least 112 bits of entropy  Reason: Minimum randomness that makes guessing challenging High  <code>Brute Force</code> SP800-63B 2 Verify: Verifier retains only a hashed version of the lookup secrets which follow the Credential Storage guidelines  Reason: In case lookup secret leaks, the hash value won't allow access to an account High  <code>Brute Force</code>, <code>Impersonation</code>, <code>Credential Theft</code> SP800-63B 3 Verify: If entropy is less than 112 bit, the lookup secret is hashed with a salt that's of a 32 bit length  Reason: Compensate lower entropy with a salt which will increase entropy High  <code>Brute Force</code> SP800-63B 4 Verify: If the the lookup secret's entropy is less than 64 bits, rate limiting mechanisms shall be put in place  Reason: Additional prevention against guessing to compensate for lower entropy High  <code>Brute Force</code> SP800-63B 5 Verify: lookup secret is accepted only once  Reason: Prevent a value from being used more than once in case it leaks High  <code>Replay Attack</code> SP800-63B 6 Verify: The user is required to reauthenticate with two factors when requesting new lookup secrets  Reason: Ensure that the actual user is making a change, not someone else High  <code>Impersonation</code>, <code>Credential Theft</code> SP800-63B 7 Verify: Once new lookup secrets are generated, older ones are no longer relevant  Reason: Prevent reuse in case of theft High  <code>Credential Theft</code> SP800-63B"},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/#out-of-band-devices","title":"\ud83d\udcf1 Out-of-Band Devices","text":"<p>\ud83d\udd36 Definition: Secure out-of-band authenticators are physical devices that can communicate with the verifier over a secure secondary channel</p> <p>\ud83d\udd36 Example:</p> <ul> <li>Push notifications to mobile devices for authentication</li> <li>SMS or phone call to deliver an authentication code</li> </ul> <p>Danger</p> <p>OTP delivered through SMS or phone is not secure and is considered RESTRICTED in NIST SP800-63B 5.1.3.3</p> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Phone and SMS should not be used as out-of-band verifiers  Reason: Considered as a restricted category by NIST High  <code>Credential Theft</code>, <code>Impersonation</code> SP800-63B 2 Verify: The out-of-band verifier expires requests, codes, or tokens after 10 minutes  Reason: Verifier not receiving the code within 10 minutes indicates an issue, such as non-delivery or wrong recipient High  <code>Credential Theft</code> SP800-63B 3 Verify: Authentication secrets, codes, or tokens are single-use and valid only for the initial authentication request  Reason: Prevent reuse in case of theft High  <code>Credential Theft</code>, <code>Impersonation</code> SP800-63B 4 Verify: Verifier retains only a hashed version of the authentication code, which follow the Credential Storage guidelines Reason: In case code leaks, the hash value won't allow access to an account High  <code>Credential Theft</code>, <code>Impersonation</code> SP800-63B 5 Verify: Authentication code is generated by a secure random number generator containing at least 20 bits of entropy (typically, a six digital random number is sufficient)  Reason: Minimum complexity to make guessing challenging High  <code>Brute Force</code> SP800-63B"},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/#single-and-multi-factor-otp-devices","title":"\ud83d\udd22 Single and Multi Factor OTP Devices","text":"<p>\ud83d\udd36 Definition:</p> <ul> <li>Single-factor One time Password (OTP) devices are physical devices that generate OTPs</li> <li>Multi-factor OTP devices are like single-factor ones but require activation through either knowledge, physical characteristic, or a combination of both</li> </ul> <p>\ud83d\udd36 Example: OTP is displayed on the device and manually entered for transmission to the verifier, demonstrating possession and control. An OTP device can show, for instance, six characters at once</p> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Approved cryptography is used to generate the secret  Reason: Weak cryptography can be bypassed High  <code>Brute Force</code> SP800-63B 2 Verify: Approved authenticated protected channels are used when collecting the OTP  Reason: Ensures that the OTP is being generated from the right device High  <code>Eavesdropping</code> SP800-63B 3 Verify: Time-based OTPs expiration is in place  Reason: Prevents the OTP from being reused in case its stolen High  <code>Credential Theft</code>, <code>Impersonation</code>, <code>Replay Attack</code> SP800-63B 4 Verify: Time-based OTP is used only once within the validity period  Reason: Prevents the OTP from being reused in case it's stolen High  <code>Credential Theft</code> <code>Impersonation</code>, <code>Replay Attack</code> SP800-63B 5 Verify: Symmetric keys used to verify submitted OTPs are highly protected, such as by using a hardware security module or secure operating system-based key storage  Reason: Key theft can allow an attacker to generate a valid secrets High  <code>Credential Theft</code>, <code>Impersonation</code> SP800-63B 6 Verify: Physical single-factor OTP generator can be revoked in case of theft or loss. Ensure that revocation is immediately effective across logged-in sessions, regardless of location  Reason: Protect the user's account from unauthorized access by a malicious party High  <code>Credential Theft</code>, <code>Impersonation</code>, <code>Replay Attack</code> SP800-63B 7 Verify: Verifier can identify the authenticator as a multi-factor device, but in its absence, it should be considered as single-factor  Reason: Ensures that a user is choosing the right authentication factor High  <code>Credential Theft</code>, <code>Brute Force</code> SP800-63B"},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/#single-and-multi-factor-cryptographic-device-and-software","title":"\ud83d\udd11 Single and Multi Factor Cryptographic Device and Software","text":"<p>\ud83d\udd36 Definitions:</p> <ul> <li>A single-factor cryptographic device is a hardware device that performs cryptographic operations using a protected cryptographic key(s) and provides the authenticator output via direct connection to the user endpoint</li> <li>A multi-factor cryptographic device is similar to a single-factor cryptographic device but must be activated by either something you know, something you are or both</li> <li>A single-factor cryptographic software is a cryptographic key stored on a disk or some other \"soft\" media. Authentication is accomplished by proving possession and control of the key</li> <li>A Multi-factor cryptographic software is similar to single-factor cryptographic software but must be activated by either something you know, something you are or both</li> </ul> <p>\ud83d\udd36 Examples:</p> <ul> <li> <p>Single/Multi-factor cryptographic device:</p> <ul> <li>USB authenticators such as a YubiKey or Google Titan</li> <li>Smart cards with an embedded processor</li> </ul> </li> <li> <p>Single/Multi-factor cryptographic software:</p> <ul> <li>Use of a client X.509 certificate</li> </ul> </li> </ul> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Cryptographic keys are highly protected  Reason: Key theft can allow an attacker to generate valid secrets High  <code>Credential Theft</code>, <code>Impersonation</code> SP800-63B 2 Verify: Single-factor cryptographic device verifiers generate a challenge nonce, send it to the corresponding authenticator, and use the authenticator output to verify possession of the device. Ensure that the challenge nonce is at least 64 bits in length  Reason: The minimum length that makes predicting its value challenging High  <code>Brute Force</code> SP800-63B 3 Verify: Challenge nonce is unique for each authenticator  Reason: Ensures that more than one authenticator are not used for a single user account High  <code>Impersonation</code> SP800-63B 4 Verify: Approved cryptographic algorithms are used in the generation, seeding, and verification  Reason: Unauthorized algorithms can be circumvented High  <code>Brute Force</code> SP800-63B"},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/#something-you-are","title":"Something you are","text":""},{"location":"Wiki/Access-Control/MFA/Authenticator-Types/#biometric","title":"\ud83e\uddec Biometric","text":"<p>\ud83d\udd36 Definition: The use of biometrics in authentication includes both measurements of physical characteristics and behavioral characteristics of a user</p> <p>\ud83d\udd36 Example:</p> <ul> <li>Facial recognition</li> <li>Fingerprint scan</li> <li>Iris scan</li> <li>Typing cadence</li> </ul> #\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Biometric authenticators are limited to use only as secondary factors in conjunction with either something you have and something you know  Reason: The false match rate in Biometric isn't strong enough to be used as a single factor High  <code>Impersonation</code> <code>xxxxxxxxxxxxxxxx</code> SP800-63B 2 Verify: The sensor or endpoint is authenticated before capturing the biometric sample from the user  Reason: Prevent the use of fraudulent devices High  <code>Impersonation</code> SP800-63B 3 Verify: The biometric system allows no more than five consecutive failed authentication attempts  Reason: Limit the occurrence of impersonation attacks High  <code>Impersonation</code> SP800-63B 4 Verify: After five consecutive failed attempts, disable authentication for 30 seconds before the next attempt and increase exponentially with each successive failed attempt or disable the biometric user authentication and offer another factor  Reason: Limit guessing attacks High  <code>Brute Force</code> SP800-63B 5 Verify: The integrity of the endpoint or sensor can be determined so any sensor or endpoint change can be detected  Reason: Prevent an attacker from installing a fraudulent device to bypass biometric check High  <code>Impersonation</code> SP800-63B <p>\ud83d\udd17 Sources:</p> <p>Open Web Application Security Project (OWASP):</p> <ul> <li>[SQCS] Security Question Cheat Sheet</li> </ul> <p>National Institute of Standards and Technology (NIST) SP 800-63B:</p> <ul> <li>[SP800-63B] 5 Authenticator and Verifier Requirements</li> </ul>"},{"location":"Wiki/Software/GitHub/","title":"GitHub","text":"<p>This checklist is a guide for securing authorization on a website. It outlines a series of steps and best practices that should be taken to ensure that only authorized users can access sensitive information and perform certain actions on a website.</p>"},{"location":"Wiki/Software/GitHub/#account-security","title":"\ud83d\udd12 Account Security","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Multi-Factor authentication is enabled  Reason: Password leak won't have any impact because the second factor is still not compromised High  <code>Impersonation</code>, <code>Credential Theft</code> GHD-UA 2 Verify: Enable PassKeys for a passwordless authentication experience  Reason: Your device acts as an authenticator and will grant you access to your account. No need to remember passwords. Also satisfies MFA requirement Medium  <code>Credential Theft</code> GHD-UA 3 Verify: Periodically rotate SSH keys and Access Tokens  Reason: If they leak, an attacker won't have permanent access to your account Medium  <code>Credential Theft</code> GHD-UA 4 Verify: Periodically review active sessions of devices logged in to your GitHub account  Reason: To ensure that no unwanted device has access to your account Medium  <code>Impersonation</code> GHD-S"},{"location":"Wiki/Software/GitHub/#repository-security","title":"\ud83d\udcbb Repository Security","text":"#\ufe0f\u20e3 \u2705Items \u26a0\ufe0fSeverity \u2620\ufe0fVulnerabilities \ud83d\udd17Sources 1 Verify: Least privilege is enforced  Reason: Minimize attack surface incase someone has unauthorized access to someone's account High  <code>Information Leakage</code>, <code>Insider Threat</code>, <code>Privilege Escalation</code> GHD-UA 2 Verify: Review privileges of every person who has access to your project. Revoke access if they are no longer a contributor  Reason: If they try to do anyone thing suspicious they won't have access to do so High  <code>Information Leakage</code>, <code>Insider Threat</code>, <code>Privilege Escalation</code> GHD-UA 3 Verify: Enable branch protection rules  Reason: Provides an essential layer of security in preventing unauthorized or accidental changes to sensitive parts of your codebase Medium  <code>Misuse of Privileges</code> GHD-BPR 4 Verify: Disable forking  Reason: To prevent duplication of your project Medium  <code>Intellectual Property Theft</code> GHD-FP 5 Verify: Inspect third party applications connected to your GitHub  Reason: Ensure that no malicious application has access to your repository High  <code>Credential Theft</code>, <code>Data Exfiltration</code> GHD-AA  6 Verify: Periodically review security logs  Reason: Detect any malicious activities that might have taken place High  <code>Unauthorized Access</code>, <code>Brute Force</code> GHD-SL 7 Verify: Don't store hardcoded secrets in your code  Reason: Anyone who has access to your repository either authorized or unauthorized, can use these secrets to gain access to other parts of your software supply chain High  <code>Credential Theft</code> GHD-UA 8 Verify: Enable notifications and alerts for your project  Reason: To be alerted if any malicious changes occur to your code High  <code>Unauthorized Access</code>, <code>Insider Threat</code> GHD-N 9 Verify: Enable GitHub security tools  Reason: Scan your code and third party libraries to find security vulnerabilities High  <code>Vulnerable Dependency</code>, <code>Vulnerable Code</code>, <code>Hardcoded Secret</code> GHD-SA 10 Verify: Require commit signing  Reason: To give other people confidence about the origin of a change you have made Low  <code>Impersonation</code> GHD-CS 11 Verify: Create a Security.md file  Reason: Provide guidelines on how security issues are reported and fixed. High  <code>Zero Day</code> GHD-SP 12 Verify: Review webhooks on your repository  Reason: Webhooks could allow an attacker to intercept pushes made to your repository High  <code>Unauthorized Access</code>, <code>Intellectual Property Theft</code> GHD-WS <p>\ud83d\udd17 Sources:</p> <p>GitHub:</p> <ul> <li>[GHD-UA] GitHub Docs - Unauthorized Access</li> <li>[GHD-S] GitHub Docs - Sessions</li> <li>[GHD-BPR] GitHub Docs - Branch Protection Rules</li> <li>[GHD-FP] GitHub Docs - Forking Policy</li> <li>[GHD-AA] GitHub Docs - Apps Authorization</li> <li>[GHD-SD] GitHub Docs - Sensitive Data</li> <li>[GHD-N] GitHub Docs - Notifications</li> <li>[GHD-SA] GitHub Docs - Security and Analysis</li> <li>[GHD-CS] GitHub Docs - Commit Signature</li> <li>[GHD-SP] GitHub Docs - Security Policy</li> <li>[GHD-WS] GitHub Docs - Webhook Security</li> <li>[GHD-SL] GitHub Docs - Security Logs</li> </ul>"},{"location":"Wiki/Vulnerabilities/","title":"Index","text":""},{"location":"Wiki/Vulnerabilities/#vulnerabilities","title":"\u2620\ufe0f Vulnerabilities","text":"#\ufe0f\u20e3 \ud83d\udc7eType \ud83d\udcd6Definition \u2728Example \ud83d\udee1\ufe0fRemediation  1 Brute Force An automated program that tries all possible combinations to guess sensitive information Guessing passwords, hashes or API secrets Rate limiting  2 Privilege Escalation Someone gains unauthorized access with higher privileges than they were initially granted Becoming admin from a regular user Least privilege, proper access control, and employee awareness  3 Impersonation This is a type of phishing attack where an attacker pretends to be someone else in order to steal data, gain unauthorize access, or disrupt operations Sending email as your manager at your employer Employee awareness, proper identity and access management  4 Denial of Service A malicious attempt to disrupt the normal functioning of a targeted server, service, or network by overwhelming it with a flood of Internet traffic such as bogus packets, requests for connections, or malformed messages Making countless requests to a web server until its resources are exhausted Rate limiting  5 SQL Injection Malicious SQL code for backend database manipulation to access information that was not intended to be displayed Extracting username and passwords from the database Input validation escaping and sanitization, stored procedures, prepared statement with parameterized queries  6 Weak Encryption Use of encryption algorithms that are not robust enough to withstand attacks Insufficient key length which makes brute forcing easy or outdated encryption algorithms with known vulnerabilities Secure encryption algorithms  7 Weak Hashing Use of hashing algorithms that are not robust enough to withstand attacks Outdated hashing algorithm which produces collisions Secure hashing algorithms  8 Credential Theft Credential theft occurs when malicious actors steal login details and use them to access services or applications to steadily elevate their privileges Stolen API key is used to perform malicious API calls to withdraw customer account funds Secure storage and secure transportation  9 Cookie Poisoning Cookie poisoning is a type of cyber attack in which a bad actor hijacks, forges, alters or manipulates a cookie to gain unauthorized access to a user's account Steal session cookie through Cross-Site Scripting HTTPS, secure and httpOnly flags are set on cookie, Cookie expiration  10 Logic Error Flaws in the design and implementation of an application that allow an attacker to elicit unintended behavior Accepting negative values when a customer is transferring funds Testing all edge cases  11 Host Header Injection Attackers exploit this vulnerability to manipulate the Host header and cause the application to behave in unexpected ways Redirecting users to malicious sites for phishing or malware distribution Input validation and sanitization  12 Referrer Leakage When sensitive information is inadvertently included in the HTTP referrer header and sent to external sites If session IDs in the referrer header are leaked, attackers might gain unauthorized access to user accounts Avoid Sensitive Data in URLs, No Referrer tag is set  13 Insufficient Logging Attackers rely on insufficient logging to achieve their goals without being detected An attacker brute forces passwords without being detected and stopped Proper logging and monitoring  14 Information Leakage When a website unintentionally reveals sensitive information to its users A server reveals passwords in error messages Employee awareness, sanitize output, enforce least privilege  15 Eavesdropping An eavesdropping attack occurs when a attacker intercepts, deletes, or modifies data that is transmitted between two devices An attacker is able to transmit and modify login credentials being sent on unencrypted HTTP network HTTPS, HTTP Strict Transport Security  16 Website Defacement Website defacement is the unauthorized alteration of the visual appearance or content of a website by a malicious actor Attacker published profanity, hate speech, politically motivated messages, or even links to malicious websites Content moderation, community guidelines  17 Vulnerable Dependency Libraries or dependencies used by your application which has known vulnerabilities that can impact your application. An attacker steals funds by exploiting a remote code execution vulnerability in a database library used by an application Dependency scans, regularly updating, stay up to date with new vulnerabilities in used libraries  18 Injection An umbrella term used for injections based attacks where an attacker injection malicious input to manipulate your application logic. (SQL injection, header injection, cross-site scripting, LDAP injection etc.) An attacker uses SQL injection to steal password hashes from the database Input validation and sanitization  19 Misconfiguration When a system or application configuration settings are missing or are erroneously implemented, allowing unauthorized access An admin account for AWS is using a default password Least privilege, employee awareness, automated scans  20 Path Traversal Path traversal is a type of security vulnerability that can occur when a web application or service allows an attacker to access server files or directories that are outside the intended directory structure. This can lead to the unauthorized reading or modification of sensitive data Admin route is left unchecked and can be accessible publicly Input validation and sanitization  21 Location Spoofing Manipulate the location data shared by their device Attacker located across the globe spoofs their location to avoid suspicion IP verification, Browser location API  22 Insecure Direct Object Reference when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly An attacker changes the id parameter in the URL (e.g., to id=admin) to access another user's profile without authorization Proper access control, input validation and sanitization  23 Man in the Middle Communications between two parties is intercepted by an attack and data is either stolen or modified The attacker gains access to a user's email account and intercepts emails between the user and their contacts. The attacker can alter the contents of these emails or use the information for malicious purposes HTTPS  24 Roll Your Own Code Developers writing their own encryption algorithms or session management mechanisms, instead of using established, thoroughly tested libraries or frameworks Writing your own encryption algorithm which is not thoroughly tested Use popular well tested frameworks, libraries or algorithms  25 Cross-Site Request Forgery An attack that forces authenticated users to submit a request to a Web application against which they are currently authenticated If a social media site doesn't properly verify requests, an attacker could create a malicious site that posts unwanted content or spam on the victim's social media profile when they visit the malicious site CSRF token, SameSite cookie, check Referrer Header  26 Session Hijacking The malicious act of taking control of a user's web session An attacker steals a user's session cookie through XSS (Cross-Site Scripting) attacks, packet sniffing, or other methods. Once the attacker has the cookie, they can use it to impersonate the user on the web application Secure cookies, SameSite cookies, httpOnly cookies, cookie expiration  27 Replay Attack It involves an attacker capturing a valid web request and retransmitting it one or more times. This can lead to unauthorized actions or access If a Two-Factor Authentication system doesn't properly validate the uniqueness or time sensitivity of the authentication codes, an attacker could intercept and reuse these codes to gain unauthorized access HTTPS, rate limiting, input validation  28 Insider Threat A cyber security risk that originates from within an organization A current or former employee, contractor, vendor, or partner, abuses their legitimate access rights, causing harm to the organization's networks, systems, and data. Least privilege  29 Misuse of Privileges This involves users who have legitimate access but engage in actions that are outside of their roles or responsibilities, often for malicious purposes A user with admin privileges browses through confidential files and extracts or deletes information Least privilege, logging and monitoring  30 Intellectual Property Theft Theft of propriety code, application or system A malicious contributor clones your repository and labels it as theirs Least privilege, proper access control  31 Data Exfiltration An attacker steals information form a software system An attack extracts financial data from a compromised server Least privilege, logging and monitoring, proper access control  32 Unauthorized Access An attacker gains access to an organization's software application without permission An attacker gains unauthorized access to a user account through phishing logging and monitoring, proper access control  33 Hardcoded Secret Including sensitive information such as passwords, API or encryption keys inside the codebase Including PayPal API key inside an opensource project that everyone can see Secret scans  34 Vulnerable Code An umbrella term used for a flaw in your code that creates a potential risk of compromising security An attacker injects malicious SQL code to delete an application's database tabled Input validation and sanitization, automated scans, proper access control  35 Zero Day An unknown or undressed security flaw in a software system An attacker is able to exploit a zero-day vulnerability in a SaaS product which gives them unauthorized access to an admin account Keep software up to date, least privilege, security audits, vulnerability disclosure"},{"location":"blog/","title":"Index","text":"<p>COMING SOON</p>"},{"location":"blog/posts/post-1/","title":"Hello world!","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec maximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula erat, ut egestas tellus eros at risus. In hac habitasse platea dictumst. Phasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris Nam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in sem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac metus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.</p> <p>Donec volutpat, elit ac volutpat laoreet, turpis dolor semper nibh, et dictum massa ex pulvinar elit. Curabitur commodo sit amet dolor sed mattis. Etiam tempor odio eu nisi gravida cursus. Maecenas ante enim, fermentum sit amet molestie nec, mollis ac libero. Vivamus sagittis suscipit eros ut luctus.</p> <p>Nunc vehicula sagittis condimentum. Cras facilisis bibendum lorem et feugiat. In auctor accumsan ligula, at consectetur erat commodo quis. Morbi ac nunc pharetra, pellentesque risus in, consectetur urna. Nulla id enim facilisis arcu tincidunt pulvinar. Vestibulum laoreet risus scelerisque porta congue. In velit purus, dictum quis neque nec, molestie viverra risus. Nam pellentesque tellus id elit ultricies, vel finibus erat cursus.</p>"},{"location":"blog/posts/test/","title":"Hello world!","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec maximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula erat, ut egestas tellus eros at risus. In hac habitasse platea dictumst. Phasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris Nam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in sem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac metus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.</p> <p>Donec volutpat, elit ac volutpat laoreet, turpis dolor semper nibh, et dictum massa ex pulvinar elit. Curabitur commodo sit amet dolor sed mattis. Etiam tempor odio eu nisi gravida cursus. Maecenas ante enim, fermentum sit amet molestie nec, mollis ac libero. Vivamus sagittis suscipit eros ut luctus.</p> <p>Nunc vehicula sagittis condimentum. Cras facilisis bibendum lorem et feugiat. In auctor accumsan ligula, at consectetur erat commodo quis. Morbi ac nunc pharetra, pellentesque risus in, consectetur urna. Nulla id enim facilisis arcu tincidunt pulvinar. Vestibulum laoreet risus scelerisque porta congue. In velit purus, dictum quis neque nec, molestie viverra risus. Nam pellentesque tellus id elit ultricies, vel finibus erat cursus.</p>"}]}